name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      publish:
        description: "Publish built distributions to PyPI"
        required: false
        type: boolean
        default: false
  release:
    types: [published]

jobs:
  lint-test:
    name: Lint & Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    continue-on-error: ${{ matrix.python-version == '3.13' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: ${{ matrix.python-version == '3.13' }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Ruff lint
        run: ruff check src tests

      - name: Mypy
        run: mypy

      - name: Pytest with coverage
        run: pytest -q --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  optional-backends:
    name: Optional Backends (${{ matrix.backend }})
    runs-on: ubuntu-latest
    needs: lint-test
    strategy:
      fail-fast: false
      matrix:
        backend: ["torch", "jax"]
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          if [ "${{ matrix.backend }}" = "torch" ]; then pip install -e ".[torch]"; fi
          if [ "${{ matrix.backend }}" = "jax" ]; then pip install -e ".[jax]"; fi

      - name: Pytest (optional backends)
        run: pytest -q

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: lint-test
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build twine

      - name: Build distributions
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-distributions
          path: dist/

      - name: Publish to PyPI
        if: ${{ env.TWINE_PASSWORD != '' && (github.event_name == 'release' && github.event.action == 'published' || github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true') }}
        run: twine upload --non-interactive dist/*
