from __future__ import annotations

from pathlib import Path

import mkdocs_gen_files

SRC_DIR = Path("src")
PACKAGE = "fuse"

nav = mkdocs_gen_files.Nav()

modules = []
for path in sorted(SRC_DIR.rglob("*.py")):
    rel = path.relative_to(SRC_DIR).with_suffix("")
    parts = list(rel.parts)
    # Only document our package
    if parts[0] != PACKAGE:
        continue
    if parts[-1] == "__init__":
        mod_name = ".".join(parts[:-1])
        doc_parts = parts[:-1]
        if mod_name == "":
            # Skip top-level package module entry; reference/index.md covers it
            continue
    else:
        mod_name = ".".join(parts)
        doc_parts = parts

    modules.append((parts, mod_name))

    doc_path = Path("reference", *doc_parts, "index.md")
    nav_path = doc_parts[1:] or [doc_parts[0]]

    nav[tuple(nav_path)] = doc_path.as_posix()

    with mkdocs_gen_files.open(doc_path, "w") as fd:
        fd.write(f"# {mod_name}\n\n")
        fd.write("::: " + mod_name + "\n")
        fd.write("    options:\n")
        fd.write("      show_root_heading: true\n")
        fd.write("      members_order: source\n")
        fd.write("      show_signature: true\n")
        fd.write("      filters:\n")
        fd.write("        - '!^_'\n")

# Write summary nav and landing page
with mkdocs_gen_files.open("reference/SUMMARY.md", "w") as fd:
    for line in nav.build_literate_nav():
        if "](" in line:
            prefix, remainder = line.split("](", 1)
            target, suffix = remainder.split(")", 1)
            try:
                target_path = Path(target)
                relative = target_path.relative_to("reference").as_posix()
            except ValueError:
                relative = target
            line = f"{prefix}]({relative}){suffix}"
        fd.write(line)

with mkdocs_gen_files.open("reference/index.md", "w") as fd:
    fd.write("# API Reference\n\n")
    fd.write(
        "Autogenerated from Python docstrings via mkdocstrings. "
        "Browse the modules using the navigation.\n"
    )

