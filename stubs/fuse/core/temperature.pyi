from dataclasses import dataclass
from typing import Any, Callable, Mapping, Sequence

from _typeshed import Incomplete

Number = int | float
TemperatureSpec: Incomplete

class TemperatureSchedule:
    def value(self, iteration: int) -> float: ...
    def manifest(self) -> dict[str, Any]: ...
    def __call__(self, iteration: int) -> float: ...

@dataclass
class ConstantSchedule(TemperatureSchedule):
    temperature: float
    def __post_init__(self) -> None: ...
    def value(self, iteration: int) -> float: ...
    def manifest(self) -> dict[str, Any]: ...

@dataclass
class LinearRampSchedule(TemperatureSchedule):
    start: float
    end: float
    steps: int
    def __post_init__(self) -> None: ...
    def value(self, iteration: int) -> float: ...
    def manifest(self) -> dict[str, Any]: ...

@dataclass
class PiecewiseSchedule(TemperatureSchedule):
    points: Sequence[tuple[int, float]]
    def __post_init__(self) -> None: ...
    def value(self, iteration: int) -> float: ...
    def manifest(self) -> dict[str, Any]: ...

@dataclass
class CallableSchedule(TemperatureSchedule):
    fn: Callable[[int], Number]
    description: str | None = ...
    def value(self, iteration: int) -> float: ...
    def manifest(self) -> dict[str, Any]: ...

def make_schedule(spec: TemperatureSpec) -> TemperatureSchedule: ...
def normalize_temperature_map(
    mapping: Mapping[str, TemperatureSpec] | None,
) -> dict[str, TemperatureSchedule] | None: ...
def coerce_temperature_value(value: Any) -> float: ...
