from dataclasses import dataclass, field
from typing import Any, Mapping, Sequence

@dataclass
class TensorRef:
    name: str
    indices: list[str]
    dotted_axes: list[str] = field(default_factory=list)
    rolling: dict[str, int] = field(default_factory=dict)
    index_specs: list['IndexSpec'] = field(default_factory=list)
    is_paren: bool = ...

@dataclass
class SliceSpec:
    start: int | None = ...
    stop: int | None = ...
    step: int | None = ...

@dataclass
class IndexSpec:
    axis: str
    offset: int = ...
    slice: SliceSpec | None = ...

@dataclass
class Term:
    factors: list[Any]

@dataclass
class FuncCall:
    name: str
    arg: Any
    kwargs: dict[str, Any] = field(default_factory=dict)

@dataclass
class IndexFunction:
    name: str
    axis: str
Expr = Any

@dataclass
class Equation:
    lhs: TensorRef
    rhs: Expr
    projection: str = ...
    src_file: str | None = ...
    sink_file: str | None = ...
    is_source: bool = ...
    is_sink: bool = ...
    export: bool = ...
    line: int | None = ...
    column: int | None = ...
    source: str | None = ...

@dataclass
class ProgramIR:
    equations: list[Equation]
    exports: list[str] = field(default_factory=list)
    def streaming_axes(self) -> list[str]: ...
    def has_streaming(self) -> bool: ...
    def boolean_tensors(self) -> set[str]: ...

def lhs_indices(eq: Equation) -> list[str]: ...
def rhs_indices(eq: Equation) -> list[str]: ...
def equation_index_summary(eq: Equation, projected: Sequence[str]) -> dict[str, list[str]]: ...
def format_index_summary(summary: Mapping[str, Sequence[str]]) -> str: ...
def json_ready(value: Any) -> Any: ...
